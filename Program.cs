using System;
using System.IO;
using nsDriverProgram;
using nsStrings;
using nsSorting;
using nsDictionariesnHashmaps;
using nsGreedy;
using nsArrays;
using nsRecursionNBactracking;
using nsDynamic;
using nsMiscellaneous;
using nsLinkedList;

namespace HelloWorld
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
            Console.WriteLine("ABCD");
            // RemoveCharacters.RemoveCharacters.RemoveCharacterFromString("geeksforgeek", 'g');
            //ReverseString.ReverseString.RemoveCharacterFromString("abcdefg");
            //SpecialPalindrome.SpecialPalindrome.FindSpecialPalindromeCount("nnonnpoo");
            //SpecialPalindrome.SpecialPalindrome.FindSpecialPalindromeCount("aaaa");
            //Solution.whatFlavors(new int[]{2, 2, }, 4);
            // Sorting.BubbleSort(new int[]{5, 8, 12, 10, 4, 6});
            //Sorting.MergeSortDriver(new int[]{5, 8, 10, 4, 6},0,4);
            //MinimumTImeRequired.LCM(new long[]{4, 5, 6}, 12);
            //ReverseSort.ReverseSort.CheckIfReverseSortable(new int[]{5, 6, 12, 11, 15, 15});
            //FraudulentActivityNotification.FraudulentActivityNotification.GetNotification(new int[]{2, 7, 4, 2, 3, 6, 8, 4, 5}, 4);
            //FraudulentActivityNotification.FraudulentActivityNotification.GetNotification(new int[]{2, 3, 4, 2, 3, 6, 8, 4, 5}, 5);
            //MinimumAbsoluteDifference.MinimumAbsoluteDifference.GetminimumDifference(new int[] {-59, -36, -13, 1, -53, -92, -2, -96, -54, 75});
            //GreedyFlorist.GreedyFlorist.MInimizeCost(3, new int[] {2, 5, 6});
            //MaxMin.MaxMin.MinimumUnfairness(3, new int[] {100, 200, 300, 350, 400, 401, 402});
            //BalancedBrackets.BalancedBrackets.IsBalanced("()()()[]");
            //Stack.Stack.ImplementStack();
            //nsStacksQueues.StackOfPlates.PerformStackSetOperations();
            nsStacksQueues.SortedStack.GetSortedStack(new int[]{15, 12, 10, 18, 16, 9, 11});
            //ATaleOfTwoStacks.ATaleOfTwoStacks.DriverMethod();
            //CastleOnTheGrid.CastleOnTheGrid.MinimumMoves(new string[]{".X.",".X.","..."},0, 0, 0, 2);
            //TripleSum.TripleSum.NumberOfTriplets(new int[]{1, 3, 5, 7}, new int[]{5, 7, 9}, new int[]{7, 9, 11, 13});
            //DriverProgram program= new DriverProgram();
            // program.PerformActionsSingleLinkedList(); 
            //program.PerformActionsDoubleLinkedList();
            //nsSockMerchant.SockMerchant.GetPairs(10, new int[]{1, 1, 3, 1, 2, 1, 3, 3, 3, 3});
            //nsSockMerchant.CountingValleys.GetNumberOfValleys(8, "UDDDUDUU");
            //nsSockMerchant.RepeatedString.GetNumberOfA("jdiacikk",899491);
            //nsStacksQueues.EvaluatePostFixExpression.getPostfixExpression("512+4*+3-");
            //nsStacksQueues.EqualStacks.minimumEqualStack(new int[]{3, 2, 1, 1, 1}, new int[]{4, 3, 2}, new int[]{1, 1, 4, 1});
            //nsStacksQueues.GameOfTwoStacks.MaxScore(10, new int[]{4, 2, 4, 6, 1}, new int[]{2, 1, 8, 5});
            //  new int[]{0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1});
            //nsStacksQueues.MaximumElement.GetMaxElement();
            //SuperReducedString.GetSuperReducedString("baab");
            //MinSwaps.GetMinimumSwaps(new int[]{3, 4, 2, 5, 1});
            //CountTriplets.NumberOfTriplets(new System.Collections.Generic.List<long>{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,},1);
            //FrequencyQueries.CreateInput();
            //program.PerformActionsCircularLinkedList();
            //program.FindMergePoint();
            //HighestValuePalindrome.GetHighestpalindromeValue("3943", 4, 1);
            // string lines = File.ReadAllLines("C:\\Users\\roycha\\Desktop\\input.txt")[0];
            // int[] arr = Array.ConvertAll(lines.Split(' '), arrTemp => Convert.ToInt32(arrTemp)); 
            // GoodLandElectricity.pylons(20, arr);
            //BearNSteadyGene.Steadygene("GAAATAAA");
            //LeftRotation.RotateLeft(new int[]{1, 2, 3, 4, 5}, 3);
            //nsRecursion.FibonacciNumbers.GetFibonacciNumbers(6);
            //nsRecursionNBactracking.DavisStaircase.GetstepPerms(7);
            //nsRecursionNBactracking.RatInaMaze obj1 = new RatInaMaze();
            //obj1.CheckNQueens();
            //obj1.CheckMaze();
            // nsRecursionNBactracking.SuperDigit.superDigit("3546630947312051453014172159647935984478824945973141333062252613718025688716704470547449723886626736",100000);
            //nsRecursionNBactracking.CrossWordPuzzle obj1 = new CrossWordPuzzle();
            // obj1.CheckMaze();
            //CrossWordPuzzle.CheckMaze();
            //PowerSum.GetPowerSum(10, 2);
            //nsArrays.MinimumWindowSumInArray.GetminimumWindowSum(new int[]{2, 4, 6, 1, 7, 2, 1, 5, 6, 8, 3}, 11);
            //nsArrays.RemoveDuplicatesInArray.RemoveDuplicates(new int[]{0, 0, 1, 1, 1, 2, 2, 3, 3, 4});
            //nsArrays.KadanesAlgorithm.GetMaximumSubArraySum(new int[] {-2, -3, 4, -1, -2, 1, 5, -3});
            //nsArrays.FindTripletsSum.GetTripletsInArrayEqualToSum(new int[]{8 ,32 ,1, 7, 10, 50, 19, 21, 2}, 101);
            //nsDynamic.MaxSubArraySum.maxSubsetSum(new int[] {-2 , -3, -1, -4, -6});
            //nsDynamic.Abbreviations.checkIfAbbreviation("dQYHQEMNEFFRFJTQmNWHFVXRXlGTFNBqWQmyOWYWSTDSTMJRYHjBNTEWADLgHVgGIRGKFQSeCXNFNaIFAXOiQORUDROaNoJPXWZXIAABZKSZYFTDDTRGZXVZZNWNRHMvSTGEQCYAJSFvbqivjuqvuzafvwwifnrlcxgbjmigkms","QYHQEMNEFFRFJTQNWHFVXRXGTFNBWQOWYWSTDSTMJRYHBNTEWADLHVGIRGKFQSCXNFNIFAXOQORUDRONJPXWZXIAABZKSZYFTDDTRGZXVZZNWNRHMSTGEQCYAJSF");
            //nsDynamic.Abbreviations.checkIfAbbreviation("daBcd","ABC");
            //nsDynamic.Candies.getMinCandies(new int[] {2, 4, 3, 5, 2, 6, 4, 5});
            //nsDynamic.CoinChange.DriverMethod(10, new long[] {2, 5, 3, 6});
            //nsDynamic.CoinChange.DriverToSum(11, new long[]{1, 5, 6, 9});
            //nsStacksQueues.QueueUsingStacks.usingTwoStacks(new int[] { 1, 2, 3, 4, 5});
            //nsRecursionNBactracking.StoneDivision2.stoneDivision(12, new long[]{2 ,4});
            //nsRecursionNBactracking.StoneDivision2.stoneDivision(64, new long[]{2, 4, 8, 16, 64});
            //nsRecursionNBactracking.StoneDivision2.stoneDivision(1, new long[]{1, 2});
            //nsDynamic.LongestSubsequences.LongestPalindromicSubsquence("BBABCBCAB");
            //nsDynamic.LongestSubsequences.LongestCommonSubsquence("AGGTAB","GXTXAYB");
            //nsDynamic.ModifiedFibonacci.getModifiedFibonacci(1, 1, 20);
            //nsStacksQueues.ReverseStack.DriverMethod();
            //nsDynamic.SamAndSubstrings.GetSubstringSum("972698438521");
            //nsDynamic.StockMax.stockMax(new int[] {5, 3, 2});
            //nsSearching.MinimumLoss.minimumLoss(new long[] {20, 7, 8, 2, 5});
            //nsDynamic.SherlockAndCost.cost(new int[] {2, 4, 3});
            //nsDynamic.Equal.equal(new int[] {2, 2, 3, 7});
            //nsStrings.SeparateTheNumber.separateNumbers("88888888888888888888888888888888");
            //nsStrings.URLify.URLifyString();
            //nsMiscellaneous.NumberOfPowers.NumberOfPowersRecursive(3, 100);
            //nsSearching.HackerLandRadioTransmitters.hackerlandRadioTransmitters(new int[]{7, 2, 4, 6, 5, 9, 12, 11}, 2);
            //nsStrings.StringCompression.CompressString();
            //RemoveDuplicatesFromSingleLinkedList.RemoveDuplicates();
            //KthToLastElement.FindkthtolastElementRecursive(3);
            //PalindromeLinkedList.CheckIfPalindrome();
            //ListSum.FindSumOfTwoLinkedLists();
            //LoopDetection.CheckIfCycle();
        }
    }
}
